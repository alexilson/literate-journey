const express = require("express");
const path = require('path');
const fs = require('fs');
const uuid = require('./helpers/uuid')

const app = express();
// use environmental variable for the port OR 3001
const PORT = process.env.PORT || 3001;

// the json middleware will parse the request body as a json
app.use(express.json());
app.use(express.urlencoded({ extended: true}));

// serving static content from /public
app.use(express.static('./public'));

// get call to /notes serves up the notes.html page
app.get('/notes', (req, res) => {
    res.sendFile(path.join(__dirname, '/public/notes.html'))
});

// get request to get the notes
app.get('/api/notes', (req, res) => {

    // read JSON DB file
    fs.readFile('./db/db.json', 'utf8', (err, data) => {
        if (err) {
            console.error(err);
        } else {
            // parse string to JSON
            const parsedNotes = JSON.parse(data);
            // send back the JSON
            res.json(parsedNotes);
        }
    })
});

// post request for adding notes
app.post('/api/notes', (req, res) => {
    
    // frontend sends the title and text in the body, deconstruct the request body
    const { title, text } = req.body;
    
    // create new object with the data from the request body and add an id generated by the uuid helper function.
    const newNote = {
        id: uuid(),
        title: title,
        text: text
    }
    
    // read the JSON DB file to get all the current notes
    fs.readFile('./db/db.json', 'utf8', (err, data) => {
        if (err) {
            console.error(err);
        } else {
            // parse the data from the file into a JSON/array
            const parsedNotes = JSON.parse(data);
            
            // add the new note to the array
            parsedNotes.push(newNote);
            
            // write the array now including the new note back to the file
            fs.writeFile(
                './db/db.json',
                JSON.stringify(parsedNotes, null, 4),
                (err) => {
                    if (err) {
                        console.error(err)
                    } else {
                        // if successful, send the note page again, which will call the file and display all the notes including the new one.
                        res.sendFile(path.join(__dirname, '/public/notes.html'))
                    }
                });
            }
        })
    });

// Delete path to delete the selected note
app.delete('/api/notes/:id', (req, res) => {
    
    // get the id of the selected note from the query parameter
    const noteId = req.params.id;

    // if an id was passed
    if (noteId) {
        // load the json db file
        fs.readFile('./db/db.json', 'utf8', (err, data) => {
            if (err) {
                console.error(err);
            } else {
                // parse the file into the array
                const parsedNotes = JSON.parse(data);
                
                // code obtained from XPERT
                // check each item in the array (note) to see if its ID matches the ID of the selected note
                const indexToRemove = parsedNotes.findIndex(note => note.id === noteId)

                // findIndex returns -1 the criteria isn't found, so if it's not -1...
                if (indexToRemove !== -1) {
                    // ... splice starts removing the items at the index provided and will remove the number specified with the next input
                    // so in this case it will remove the item at the index provided and only remove 1 item.
                    parsedNotes.splice(indexToRemove, 1);
                }
                
                // write the array to the file, now without the selected note
                fs.writeFile(
                    './db/db.json',
                    JSON.stringify(parsedNotes, null, 4),
                    (err) => {
                        if (err) {
                            console.error(err)
                        } else {
                            // send the notes page again to show the notes but minus the deleted note.
                            res.sendFile(path.join(__dirname, '/public/notes.html'))
                        }
                    }
                );
            }
        })
    }
});

// wildcard path
app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, '/public/index.html'))
});

app.listen(PORT, () =>
console.log(`Literate-Journey listening at http://localhost:${PORT}/`))
